knitr::opts_chunk$set(echo = FALSE)
```{r}
answer <- 0
for (j in 1:5) {
answer <- answer + j
}
answer
answer <- NULL
for(j in 1:5){
answer <- c(answer,j)
}
answer
answer <- 0
for(j in 1:5){
answer <- c(answer,j)
}
answer
answer <- 1
for (j in 1:5) {
answer <- answer * j
}
answer
answer <- 3
for(j in 1:15){
answer <- c(answer, (7*answer) %% 31)
}
answer
answer <- 3
for(j in 1:15){
answer <- c(answer, (7*answer[j]) %% 31)
}
answer
answer <- 3
for(j in 1:20){
answer <- c(answer, (7*answer[j]) %% 31)
}
answer
answer <- 3
for(j in 1:15){
answer <- c(answer, (7*answer[j]) %% 31)
}
answer
knitr::opts_chunk$set(echo = FALSE)
interest <- function(P, periods){
if(periods <= 3){
i <- 0.04 #Annual interest for a term 3 years or less
} else {
i <- 0.05 #Annual interest for a term more than 3 years
}
totalinterest <- P((1+i)^periods - 1)
return(totalinterest)
}
interest(1000, 1)
interest <- function(P, periods){
if(periods <= 3){
i <- 0.04 #Annual interest for a term 3 years or less
} else {
i <- 0.05 #Annual interest for a term more than 3 years
}
totalinterest <- P*((1+i)^periods - 1)
return(totalinterest)
}
interest(1000, 1)
interest(1000, 2)
interest(1000, 3)
interest(1000, 4)
mortgage <- function(n, P, open){
if(open){
i <- 0.005
} else {
i <- 0.004
}
R <- P*i/(1-(1+i)^(-n))
return(R)
}
mortgage(3,5,TRUE)
mortgage(3,5,FALSE)
knitr::opts_chunk$set(echo = FALSE)
Fibonacci <- c(1,1)
while(Fibonacci[length(Fibonacci)] < 300){
Fibonacci <- c(Fibonacci, Fibonacci[length(Fibonacci)] + Fibonacci[length(Fibonacci)-1])
}
Fibonacci
Fibonacci <- c(1,1)
while(Fibonacci[length(Fibonacci)] + Fibonacci[length(Fibonacci)-1] < 300){
Fibonacci <- c(Fibonacci, Fibonacci[length(Fibonacci)] + Fibonacci[length(Fibonacci)-1])
}
Fibonacci
i <- iOld <- 0.006
while(abs(i - iOld) < 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
(1-(1+i)^(-20))/19
i <- iOld <- 0.006
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 0.006
iOld <- 0
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
(1-(1+i)^(-20))/19
i <- 5
iOld <- 0
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
(1-(1+i)^(-20))/19
i <- 500
iOld <- 0
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 50000
iOld <- 0
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 0.000000000001
iOld <- 0
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 0.000000000001
iOld <- NULL
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i <- 0.000000000001
iOld <- -1
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 0
iOld <- -1
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 5
iOld <- -1
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- -5
iOld <- -1
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- -10
iOld <- -1
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 0.006
iOld <- -1
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 0.0000001
iOld <- -1
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 0.000001
iOld <- -1
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 0.00001
iOld <- -1
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
i <- 0.0001
iOld <- -1
while(abs(i - iOld) > 0.000001){
iOld <- i
i <- (1-(1+i)^(-20))/19
}
i
seq(2, 3)
seq(2, 7)
Erastosthenes <- function(n) {
if(n >= 2) {
sieve <- seq(2,n)
primes <- c()
repeat{
p <- sieve[1]
if(p >= sqrt(n)){
primes <- c(primes, sieve)
break
}
primes <- c(primes,p)
sieve <- sieve[(sieve %% p) != 0]
}
return(primes)
} else {
stop("Input value of n should be at least 2.")
}
}
Erastosthenes(100)
compound.interest <- function(P, i.r, n){
return( P*(1+i.r)^n )
}
compound.interest <- function(P, i.r, n){
return( P*(1+i.r)^n )
}
bisection.zero <- function(f, x1, x2, tolerance){
if(abs(f(x1)) <= tolerance){
return(x1)
} else if(abs(f(x2)) <= tolerance){
return(x2)
} else{
if(sign(f(x1)) != sign(f(x2))){
x3 <- (x1 + x2)/2
while(abs(f(x3)) > tolerance) {
if(sign(f(x1)) != sign(f(x3))){
x2 <- x3
} else {
x1 <- x3
}
x3 <- (x1 + x2)/2
}
return(x3)
} else {
stop("The initial starting values must give opposite signs.")
}
}
}
g <- function(x){
return(x^2 - 4)
}
bisection.zero(g, 0, 7, 0.00001)
bisection.zero <- function(f, x1, x2, tolerance = 10^-8){
if(abs(f(x1)) <= tolerance){ #Checking if f(x1) is already close enough to 0
return(x1)
} else if(abs(f(x2)) <= tolerance){ #Checking if f(x2) is already close enough to 0
return(x2)
} else{
if(sign(f(x1)) != sign(f(x2))){ #Checking if f(x1) and f(x2) have opposite signs
x3 <- (x1 + x2)/2
while(abs(f(x3)) > tolerance) {
if(sign(f(x1)) != sign(f(x3))){
x2 <- x3
} else { #Now f(x2) and f(x3) must have opposite signs
x1 <- x3
}
x3 <- (x1 + x2)/2
}
return(x3)
} else {
stop("The initial starting values must give opposite signs.")
}
}
}
knitr::opts_chunk$set(echo = FALSE)
n <- 3000000
results <- numeric(n)
x <- 123
for(i in 1:n) {
x <- (65539*x) %% (2^31)
results[i] <- x/(2^31)
}
plot(1:n, results)
results.round <- round(results,3)
results.round
results.matrix <- matrix(results, ncol = 3)
results.matrix
results.matrix <- matrix(results.round, ncol = 3)
results.matrix
results.matrix <- matrix(results.round, ncol = 3, byrow = TRUE)
results.matrix
x <- 0.1
results.matrix[results.matrix[,1] = x,]
results.matrix[results.matrix[,1] == x,]
results.matrix.rowx <- results.matrix[results.matrix[,1] == x,]
plot(results.matrix.rowx[,2], results.matrix.rowx[,3])
par(mfrow = c(3,3))
for (i in (1:9)/10) {
x <- i
results.matrix.rowx <- results.matrix[results.matrix[,1] == x,]
plot(results.matrix.rowx[,2], results.matrix.rowx[,3])
}
plot(results.matrix.rowx[,2], results.matrix.rowx[,3], main = "x = "i ,xlab = "column 2", ylab = "column 3")
plot(results.matrix.rowx[,2], results.matrix.rowx[,3], main = "x = " + i ,xlab = "column 2", ylab = "column 3")
plot(results.matrix.rowx[,2], results.matrix.rowx[,3], main = paste("x = ",i) ,xlab = "column 2", ylab = "column 3")
0^0
c(1,2,3) * c(3,2,1)
directpoly <- function(x, vec.coef){
n <- length(vec.coef)
powers <- c()
for(i in 1:n){
powers[i] <- x^(i-1)
}
evaluation <- sum(vec.coef * powers)
return(evaluation)
}
directpoly(2, c(1,2,3))
n <- 4
a <- c(numeric(n-1), n)
a
(n-1):1
hornerpoly <- function(x, vec.coef){
n <- length(vec.coef)
a <- c(numeric(n-1), vec.coef[n])
for (i in (n-1):1) {
a[i] <- a[i+1]*x + vec.coef[i]
}
return(a[1])
}
hornerpoly(2, c(1,2,3))
10!
factorial(10)
factorial(100)
factorial(1000)
ten.fact <- factorial(10)
fifty.fact <- factorial(50)
hundred.fact <- factorial(100)
ten.fact
?fix
binom.coef <- function(n,m){
answer <- factorial(n)/(factorial(m)*factorial(n-m))
return(answer)
}
fix(binom.coef)
fix(factorial)
fix(binom.coef)
binom.coef(5000,2000)
binom.coef(50,20)
binom.coef(4,2)
sum(log(1:5000))
sum(log(1:2000))
sum(log(1:3000))
sum(log(1:5000)) - sum(log(1:2000)) - sum(log(1:3000))
exp(3360)
binom.coef <- function(n,m){
v1 <- log(1:n)
v2 <- log(1:m)
v3 <- log(1:(n-m))
answer <- exp(sum(v1) - sum(v2) - sum(v3))
return(answer)
}
